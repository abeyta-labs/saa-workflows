name: Upgrade Application Workflow

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Version of java to use'
        required: false
        type: string
        default: '17'
      runs-on:
        description: 'Runner type (e.g., ubuntu-latest, self-hosted)'
        required: false
        type: string
        default: 'ubuntu-latest'
      after-upgrade-command:
        description: 'Build tool command to execute after upgrade-plan apply'
        required: false
        type: string
    secrets:
      GH_PULL_REQUEST_TOKEN:
        required: true
      BROADCOM_SPRING_USERNAME:
        required: true
      BROADCOM_SPRING_PASSWORD:
        required: true

jobs:
  upgrade:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'liberica'
      - name: Generates Maven Settings
        uses: 's4u/maven-settings-action@v3.1.0'
        with:
          servers: '[{"id": "tanzu-spring-release", "username":  "${{ secrets.BROADCOM_SPRING_USERNAME }}", "password": "${{ secrets.BROADCOM_SPRING_PASSWORD }}"}]'
          repositories: '[{"id":"tanzu-spring-release", "name":"Spring Enterprise Supported Releases","url":"${{vars.BROADCOM_SPRING_REPOSITORY}}","snapshots":{"enabled":false}}]'
          pluginRepositories: '[{"id":"tanzu-spring-release", "name":"Spring Enterprise Supported Releases","url":"${{vars.BROADCOM_SPRING_REPOSITORY}}","snapshots":{"enabled":false}}]'
      - name: Configure Gradle Repos
        run: |
          mkdir -p ~/.gradle/init.d
          cat > ~/.gradle/init.d/broadcom.gradle << 'EOF'
            allprojects {
                repositories {
                    mavenLocal()
                    maven {
                        url = System.getenv("BROADCOM_SPRING_REPOSITORY")
                        name = "Spring Enterprise Supported Releases"
                        credentials {
                            username = System.getenv("BROADCOM_SPRING_USERNAME")
                            password = System.getenv("BROADCOM_SPRING_PASSWORD")
                        }
                    }
                    mavenCentral()
                }
            }
          
            settingsEvaluated { settings ->
                settings.pluginManagement {
                    repositories {
                        mavenLocal()
                        maven {
                            url = System.getenv("BROADCOM_SPRING_REPOSITORY")
                            name = "Spring Enterprise Supported Releases"
                            credentials {
                                username = System.getenv("BROADCOM_SPRING_USERNAME")
                                password = System.getenv("BROADCOM_SPRING_PASSWORD")
                            }
                        }
                        mavenCentral()
                    }
                }
            }
          EOF
      - name: Runs Spring Application Advisor
        continue-on-error: true
        env:
          GIT_TOKEN_FOR_PRS: ${{ secrets.GH_PULL_REQUEST_TOKEN }}
          ARTIFACTORY_TOKEN: ${{ secrets.BROADCOM_SPRING_PASSWORD }}
          CLI_DOWNLOAD_URL: ${{ vars.SPRING_APP_ADVISOR_DOWNLOAD_URL }}
          SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_URI: "https://github.com/abeyta-labs/saa-mappings.git"
          SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_TOKEN: ${{ secrets.GH_PULL_REQUEST_TOKEN }}
          SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_PATH: ".advisor/mappings/"
          SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_BRANCH: "main"
          AFTER_UPGRADE_RUN_COMMAND: "${{ inputs.after-upgrade-run-command }}"
        run: |
          # download the cli
          echo "Downloading CLI from: $CLI_DOWNLOAD_URL"
          curl -L -H "Authorization: Bearer $ARTIFACTORY_TOKEN"  -o /tmp/advisor-linux.tar -X GET $CLI_DOWNLOAD_URL
          tar -xf /tmp/advisor-linux.tar -C /tmp/ --strip-components=1 --exclude=./META-INF
          
          echo "Running advisor with mapping configuration:"
          echo "  Mapping Git Repo: $SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_URI"
          echo "  Mapping Git Path: $SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_PATH"
          echo "  Mapping Git Branch: $SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_BRANCH"
          
          # update the build config (required for upgrade-plan)
          echo "Updating the build config"
          /tmp/advisor build-config get
          
          # run the upgrade, create a branch to hold the change, commit the change in the branch, create a PR for the branch into main
          echo "Running upgrade-plan apply"
          /tmp/advisor upgrade-plan apply --push --token=$GIT_TOKEN_FOR_PRS --after-upgrade-cmd=$AFTER_UPGRADE_RUN_COMMAND
          
          # clean up
          rm /tmp/advisor-linux.tar
          rm /tmp/advisor
      - name: Get errors if exist
        if: always() && hashFiles('.advisor/errors/') != ''
        run: |
          cat .advisor/errors/*