name: Upgrade Application Workflow

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Version of java to use'
        required: false
        type: string
        default: '17'
      runs-on:
        description: 'Runner type (e.g., ubuntu-latest, self-hosted)'
        required: false
        type: string
        default: 'ubuntu-latest'
      saa-debug:
        description: 'Prints out SAA debug messages'
        required: false
        type: boolean
        default: false
      saa-build-tool:
        description: 'Selects the build tool used to resolve the project dependencies options: mvnw, mvn, gradlew, gradle'
        required: false
        type: string
      saa-build-tool-options:
        description: 'Build arguments to pass to the build tool'
        required: false
        type: string
      saa-build-tool-jvm-args:
        description: 'JVM arguments to pass into the build tool (default: $BUILD_TOOL_JVM_ARGS)'
        required: false
        type: string
      saa-force:
        description: 'Force execution of full Upgrade Plan, including intermediate dependencies'
        required: false
        type: boolean
        default: false
      saa-path:
        description: 'Selects the root directory of the source code repository (default: current directory)'
        required: false
        type: string
      saa-remove-excluded-artifacts:
        description: 'Removes excluded artifacts as part of upgrade plan'
        required: false
        type: boolean
        default: false
      saa-after-upgrade-command:
        description: 'Build tool command to execute after upgrade-plan apply'
        required: false
        type: string
      saa-create-pr:
        description: 'Generates a pull request with the code upgrades'
        required: false
        type: boolean
        default: true
      saa-squash:
        description: 'Number of steps of the original Upgrade Plan that will be squashed as the first Upgrade Plan step'
        required: false
        type: string
    secrets:
      GH_PULL_REQUEST_TOKEN:
        required: true
      BROADCOM_SPRING_USERNAME:
        required: true
      BROADCOM_SPRING_PASSWORD:
        required: true

jobs:
  upgrade:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
    steps:
      # checkout calling repo's code
      - uses: actions/checkout@v4
      # checkout saa-workflows so we can access the scripts here
      - uses: actions/checkout@v4
        with:
          repository: abeyta-labs/saa-workflows
          path: .github/abeyta-labs/saa-workflows
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'liberica'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: org-maven-${{ runner.os }}-v1
          restore-keys: org-maven-${{ runner.os }}-
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: org-gradle-${{ runner.os }}-v1
          restore-keys: org-gradle-${{ runner.os }}-
      - name: Generates Maven Settings
        uses: 's4u/maven-settings-action@v3.1.0'
        with:
          servers: '[{"id": "tanzu-spring-release", "username":  "${{ secrets.BROADCOM_SPRING_USERNAME }}", "password": "${{ secrets.BROADCOM_SPRING_PASSWORD }}"}]'
          repositories: '[{"id":"tanzu-spring-release", "name":"Spring Enterprise Supported Releases","url":"${{vars.BROADCOM_SPRING_REPOSITORY}}","snapshots":{"enabled":false}}]'
          pluginRepositories: '[{"id":"tanzu-spring-release", "name":"Spring Enterprise Supported Releases","url":"${{vars.BROADCOM_SPRING_REPOSITORY}}","snapshots":{"enabled":false}}]'
      - name: Configure Gradle Repos
        run: |
          mkdir -p ~/.gradle/init.d
          cat > ~/.gradle/init.d/broadcom.gradle << 'EOF'
            allprojects {
                repositories {
                    mavenLocal()
                    maven {
                        url = System.getenv("BROADCOM_SPRING_REPOSITORY")
                        name = "Spring Enterprise Supported Releases"
                        credentials {
                            username = System.getenv("BROADCOM_SPRING_USERNAME")
                            password = System.getenv("BROADCOM_SPRING_PASSWORD")
                        }
                    }
                    mavenCentral()
                }
            }
          
            settingsEvaluated { settings ->
                settings.pluginManagement {
                    repositories {
                        mavenLocal()
                        maven {
                            url = System.getenv("BROADCOM_SPRING_REPOSITORY")
                            name = "Spring Enterprise Supported Releases"
                            credentials {
                                username = System.getenv("BROADCOM_SPRING_USERNAME")
                                password = System.getenv("BROADCOM_SPRING_PASSWORD")
                            }
                        }
                        mavenCentral()
                    }
                }
            }
          EOF
      - name: Runs Spring Application Advisor
        continue-on-error: true
        env:
          GIT_TOKEN_FOR_PRS: ${{ secrets.GH_PULL_REQUEST_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PULL_REQUEST_TOKEN }}
          ARTIFACTORY_TOKEN: ${{ secrets.BROADCOM_SPRING_PASSWORD }}
          CLI_DOWNLOAD_URL: ${{ vars.SPRING_APP_ADVISOR_DOWNLOAD_URL }}
          SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_URI: "https://github.com/abeyta-labs/saa-mappings.git"
          SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_TOKEN: ${{ secrets.GH_PULL_REQUEST_TOKEN }}
          SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_PATH: ".advisor/mappings/"
          SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_BRANCH: "main"
        run: |
          # download the cli
          echo "Downloading CLI from: $CLI_DOWNLOAD_URL"
          curl -L -H "Authorization: Bearer $ARTIFACTORY_TOKEN"  -o /tmp/advisor-linux.tar -X GET $CLI_DOWNLOAD_URL
          tar -xf /tmp/advisor-linux.tar -C /tmp/ --strip-components=1 --exclude=./META-INF
          
          echo "Running advisor with mapping configuration:"
          echo "  Mapping Git Repo: $SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_URI"
          echo "  Mapping Git Path: $SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_PATH"
          echo "  Mapping Git Branch: $SPRING_ADVISOR_MAPPING_CUSTOM_0_GIT_BRANCH"
          
          # build the build-config get command based on inputs
          BUILD_CONFIG_CMD=()
          BUILD_CONFIG_CMD+=("/tmp/advisor")
          BUILD_CONFIG_CMD+=("build-config")
          BUILD_CONFIG_CMD+=("get")
          [[ "${{ inputs.saa-debug }}" == "true" ]] && BUILD_CONFIG_CMD+=("--debug")
          [[ -n "${{ inputs.saa-build-tool }}" ]] && BUILD_CONFIG_CMD+=("--build-tool" "${{ inputs.saa-build-tool }}")
          [[ -n "${{ inputs.saa-build-tool-options }}" ]] && BUILD_CONFIG_CMD+=("--build-tool-options" "${{ inputs.saa-build-tool-options }}")
          [[ -n "${{ inputs.saa-path }}" ]] && BUILD_CONFIG_CMD+=("--path" "${{ inputs.saa-path }}")
          
          # update the build config
          echo "Updating the build config"
          echo "${BUILD_CONFIG_CMD[@]}"
          "${BUILD_CONFIG_CMD[@]}"
          
          UPGRADE_PLAN_OUTPUT="upgrade-plan-get-output.txt"
          NO_UPGRADES_EXIST_PHRASE="No upgrade plans available"
          MAPPING_MISSING_PHRASE="Please request your administrator to configure the projects of the following dependencies"
          SOME_UPGRADES_TO_APPLY="Some upgrades were not included in the upgrade plan"
          
          # build the upgrade-plan get command based on inputs
          UPGRADE_PLAN_GET_CMD=()
          UPGRADE_PLAN_GET_CMD+=("/tmp/advisor")
          UPGRADE_PLAN_GET_CMD+=("upgrade-plan")
          UPGRADE_PLAN_GET_CMD+=("get")
          [[ "${{ inputs.saa-debug }}" == "true" ]] && UPGRADE_PLAN_GET_CMD+=("--debug")
          [[ "${{ inputs.saa-remove-excluded-artifacts }}" == "true" ]] && UPGRADE_PLAN_GET_CMD+=("--remove-excluded-artifacts")
          [[ "${{ inputs.saa-force }}" == "true" ]] && UPGRADE_PLAN_GET_CMD+=("--force")
          [[ -n "${{ inputs.saa-path }}" ]] && UPGRADE_PLAN_GET_CMD+=("--path" "${{ inputs.saa-path }}")
          [[ -n "${{ inputs.saa-build-tool-options }}" ]] && UPGRADE_PLAN_GET_CMD+=("--build-tool-options" "${{ inputs.saa-build-tool-options }}")
          [[ -n "${{ inputs.saa-squash }}" ]] && UPGRADE_PLAN_GET_CMD+=("--squash" "${{ inputs.saa-squash }}")
          
          # run upgrade-plan get - see if we have missing mapping files
          echo "${UPGRADE_PLAN_GET_CMD[@]}"
          "${UPGRADE_PLAN_GET_CMD[@]}" 2>&1 | tee $UPGRADE_PLAN_OUTPUT
          
          if grep -q "$MAPPING_MISSING_PHRASE" $UPGRADE_PLAN_OUTPUT; then
            echo "Mappings are missing, lets create new mapping jobs"
            # parse out the missing artifacts from saa output
            grep -E $'^\t- [a-zA-Z]' "$UPGRADE_PLAN_OUTPUT" | sed $'s/^\t- //' > artifacts.txt
            # move artifacts file into saa workflows and work from there
            cp artifacts.txt .github/abeyta-labs/saa-workflows/scripts/artifacts.txt
            cd .github/abeyta-labs/saa-workflows/scripts
            # attempt to find repo urls for the missing artifacts
            python3 bulk-repo-lookup.py artifacts.txt -o artifact-details.json
            # generate mappings for artifacts where we have the repo urls found
            python3 generate-mapping-workflow.py --repo abeyta-labs/saa-mappings
          elif ! grep -q "$NO_UPGRADES_EXIST_PHRASE" "$UPGRADE_PLAN_OUTPUT" || grep -q "$SOME_UPGRADES_TO_APPLY" "$UPGRADE_PLAN_OUTPUT"; then
            # cleanup workspace of saa-workflow files prior to upgrading. They should be not included in the commit.
            rm -rf .github/abeyta-labs/saa-workflows
            rm $UPGRADE_PLAN_OUTPUT
            # run the upgrade, create a branch to hold the change, commit the change in the branch, create a PR for the branch into main
            # build the upgrade-plan apply command based on inputs
            UPGRADE_PLAN_APPLY_CMD=()
            UPGRADE_PLAN_APPLY_CMD+=("/tmp/advisor")
            UPGRADE_PLAN_APPLY_CMD+=("upgrade-plan")
            UPGRADE_PLAN_APPLY_CMD+=("apply")
            [[ "${{ inputs.saa-debug }}" == "true" ]] && UPGRADE_PLAN_APPLY_CMD+=("--debug")
            [[ -n "${{ inputs.saa-path }}" ]] && UPGRADE_PLAN_APPLY_CMD+=("--path" "${{ inputs.saa-path }}")
            [[ "${{ inputs.saa-force }}" == "true" ]] && UPGRADE_PLAN_APPLY_CMD+=("--force")
            [[ "${{ inputs.saa-remove-excluded-artifacts }}" == "true" ]] && UPGRADE_PLAN_APPLY_CMD+=("--remove-excluded-artifacts")
            [[ -n "${{ inputs.saa-build-tool }}" ]] && BUILD_CONFIG_CMD+=("--build-tool" "${{ inputs.saa-build-tool }}")
            [[ -n "${{ inputs.saa-build-tool-options }}" ]] && UPGRADE_PLAN_APPLY_CMD+=("--build-tool-options" "${{ inputs.saa-build-tool-options }}")
            [[ -n "${{ inputs.saa-build-tool-jvm-args }}" ]] && BUILD_CONFIG_CMD+=("--build-tool-jvm-args" "${{ inputs.saa-build-tool-jvm-args }}")
            [[ -n "${{ inputs.saa-squash }}" ]] && UPGRADE_PLAN_APPLY_CMD+=("--squash" "${{ inputs.saa-squash }}")
            [[ -n "${{ inputs.saa-after-upgrade-command }}" ]] && UPGRADE_PLAN_APPLY_CMD+=("--after-upgrade-cmd" "${{ inputs.saa-after-upgrade-command }}")
            [[ "${{ inputs.saa-create-pr }}" == "true" ]] && UPGRADE_PLAN_APPLY_CMD+=("--push")
            [[ "${{ inputs.saa-create-pr }}" == "true" ]] && UPGRADE_PLAN_APPLY_CMD+=("--token=$GIT_TOKEN_FOR_PRS")
          
            echo "Running upgrade-plan apply"
            echo "${UPGRADE_PLAN_APPLY_CMD[@]}"
            "${UPGRADE_PLAN_APPLY_CMD[@]}"
          fi
          
          # clean up
          rm /tmp/advisor-linux.tar
          rm /tmp/advisor
      - name: Get errors if exist
        if: always() && hashFiles('.advisor/errors/') != ''
        run: |
          cat .advisor/errors/*
          exit 1